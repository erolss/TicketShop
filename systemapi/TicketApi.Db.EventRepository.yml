### YamlMime:ManagedReference
items:
- uid: TicketApi.Db.EventRepository
  commentId: T:TicketApi.Db.EventRepository
  id: EventRepository
  parent: TicketApi.Db
  children:
  - TicketApi.Db.EventRepository.#ctor(System.String)
  - TicketApi.Db.EventRepository.AddEvent(TicketApi.Db.Models.Event)
  - TicketApi.Db.EventRepository.DeleteEvent(System.Int32)
  - TicketApi.Db.EventRepository.FindEvents(System.String)
  - TicketApi.Db.EventRepository.GetEventById(System.Int32)
  - TicketApi.Db.EventRepository.GetEvents(System.Int32,System.Int32)
  - TicketApi.Db.EventRepository.UpdateEvent(TicketApi.Db.Models.Event)
  langs:
  - csharp
  - vb
  name: EventRepository
  nameWithType: EventRepository
  fullName: TicketApi.Db.EventRepository
  type: Class
  source:
    remote:
      path: src/DbRepository/EventRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: EventRepository
    path: src/DbRepository/EventRepository.cs
    startLine: 14
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: 'public class EventRepository : IEventRepository'
    content.vb: >-
      Public Class EventRepository
          Implements IEventRepository
  inheritance:
  - System.Object
  implements:
  - TicketApi.Db.Interface.IEventRepository
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TicketApi.Db.EventRepository.#ctor(System.String)
  commentId: M:TicketApi.Db.EventRepository.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: TicketApi.Db.EventRepository
  langs:
  - csharp
  - vb
  name: EventRepository(String)
  nameWithType: EventRepository.EventRepository(String)
  fullName: TicketApi.Db.EventRepository.EventRepository(System.String)
  type: Constructor
  source:
    remote:
      path: src/DbRepository/EventRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: .ctor
    path: src/DbRepository/EventRepository.cs
    startLine: 18
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public EventRepository(string connectionString)
    parameters:
    - id: connectionString
      type: System.String
    content.vb: Public Sub New(connectionString As String)
  overload: TicketApi.Db.EventRepository.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.EventRepository.AddEvent(TicketApi.Db.Models.Event)
  commentId: M:TicketApi.Db.EventRepository.AddEvent(TicketApi.Db.Models.Event)
  id: AddEvent(TicketApi.Db.Models.Event)
  parent: TicketApi.Db.EventRepository
  langs:
  - csharp
  - vb
  name: AddEvent(Event)
  nameWithType: EventRepository.AddEvent(Event)
  fullName: TicketApi.Db.EventRepository.AddEvent(TicketApi.Db.Models.Event)
  type: Method
  source:
    remote:
      path: src/DbRepository/EventRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: AddEvent
    path: src/DbRepository/EventRepository.cs
    startLine: 23
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public Event AddEvent(Event item)
    parameters:
    - id: item
      type: TicketApi.Db.Models.Event
    return:
      type: TicketApi.Db.Models.Event
    content.vb: 'Public Function AddEvent(item As  Event) As '
  overload: TicketApi.Db.EventRepository.AddEvent*
  implements:
  - TicketApi.Db.Interface.IEventRepository.AddEvent(TicketApi.Db.Models.Event)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.EventRepository.DeleteEvent(System.Int32)
  commentId: M:TicketApi.Db.EventRepository.DeleteEvent(System.Int32)
  id: DeleteEvent(System.Int32)
  parent: TicketApi.Db.EventRepository
  langs:
  - csharp
  - vb
  name: DeleteEvent(Int32)
  nameWithType: EventRepository.DeleteEvent(Int32)
  fullName: TicketApi.Db.EventRepository.DeleteEvent(System.Int32)
  type: Method
  source:
    remote:
      path: src/DbRepository/EventRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: DeleteEvent
    path: src/DbRepository/EventRepository.cs
    startLine: 41
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public bool DeleteEvent(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function DeleteEvent(id As Integer) As Boolean
  overload: TicketApi.Db.EventRepository.DeleteEvent*
  implements:
  - TicketApi.Db.Interface.IEventRepository.DeleteEvent(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.EventRepository.GetEventById(System.Int32)
  commentId: M:TicketApi.Db.EventRepository.GetEventById(System.Int32)
  id: GetEventById(System.Int32)
  parent: TicketApi.Db.EventRepository
  langs:
  - csharp
  - vb
  name: GetEventById(Int32)
  nameWithType: EventRepository.GetEventById(Int32)
  fullName: TicketApi.Db.EventRepository.GetEventById(System.Int32)
  type: Method
  source:
    remote:
      path: src/DbRepository/EventRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetEventById
    path: src/DbRepository/EventRepository.cs
    startLine: 60
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public Event GetEventById(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: TicketApi.Db.Models.Event
    content.vb: 'Public Function GetEventById(id As Integer) As '
  overload: TicketApi.Db.EventRepository.GetEventById*
  implements:
  - TicketApi.Db.Interface.IEventRepository.GetEventById(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.EventRepository.GetEvents(System.Int32,System.Int32)
  commentId: M:TicketApi.Db.EventRepository.GetEvents(System.Int32,System.Int32)
  id: GetEvents(System.Int32,System.Int32)
  parent: TicketApi.Db.EventRepository
  langs:
  - csharp
  - vb
  name: GetEvents(Int32, Int32)
  nameWithType: EventRepository.GetEvents(Int32, Int32)
  fullName: TicketApi.Db.EventRepository.GetEvents(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/DbRepository/EventRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetEvents
    path: src/DbRepository/EventRepository.cs
    startLine: 76
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public List<Event> GetEvents(int offset = 0, int maxLimit = 20)
    parameters:
    - id: offset
      type: System.Int32
    - id: maxLimit
      type: System.Int32
    return:
      type: System.Collections.Generic.List{TicketApi.Db.Models.Event}
    content.vb: Public Function GetEvents(offset As Integer = 0, maxLimit As Integer = 20) As List(Of  Event)
  overload: TicketApi.Db.EventRepository.GetEvents*
  implements:
  - TicketApi.Db.Interface.IEventRepository.GetEvents(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.EventRepository.UpdateEvent(TicketApi.Db.Models.Event)
  commentId: M:TicketApi.Db.EventRepository.UpdateEvent(TicketApi.Db.Models.Event)
  id: UpdateEvent(TicketApi.Db.Models.Event)
  parent: TicketApi.Db.EventRepository
  langs:
  - csharp
  - vb
  name: UpdateEvent(Event)
  nameWithType: EventRepository.UpdateEvent(Event)
  fullName: TicketApi.Db.EventRepository.UpdateEvent(TicketApi.Db.Models.Event)
  type: Method
  source:
    remote:
      path: src/DbRepository/EventRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: UpdateEvent
    path: src/DbRepository/EventRepository.cs
    startLine: 98
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public Event UpdateEvent(Event item)
    parameters:
    - id: item
      type: TicketApi.Db.Models.Event
    return:
      type: TicketApi.Db.Models.Event
    content.vb: 'Public Function UpdateEvent(item As  Event) As '
  overload: TicketApi.Db.EventRepository.UpdateEvent*
  implements:
  - TicketApi.Db.Interface.IEventRepository.UpdateEvent(TicketApi.Db.Models.Event)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.EventRepository.FindEvents(System.String)
  commentId: M:TicketApi.Db.EventRepository.FindEvents(System.String)
  id: FindEvents(System.String)
  parent: TicketApi.Db.EventRepository
  langs:
  - csharp
  - vb
  name: FindEvents(String)
  nameWithType: EventRepository.FindEvents(String)
  fullName: TicketApi.Db.EventRepository.FindEvents(System.String)
  type: Method
  source:
    remote:
      path: src/DbRepository/EventRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: FindEvents
    path: src/DbRepository/EventRepository.cs
    startLine: 116
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public List<Event> FindEvents(string searchStr)
    parameters:
    - id: searchStr
      type: System.String
    return:
      type: System.Collections.Generic.List{TicketApi.Db.Models.Event}
    content.vb: Public Function FindEvents(searchStr As String) As List(Of  Event)
  overload: TicketApi.Db.EventRepository.FindEvents*
  implements:
  - TicketApi.Db.Interface.IEventRepository.FindEvents(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TicketApi.Db
  commentId: N:TicketApi.Db
  isExternal: false
  name: TicketApi.Db
  nameWithType: TicketApi.Db
  fullName: TicketApi.Db
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TicketApi.Db.Interface.IEventRepository
  commentId: T:TicketApi.Db.Interface.IEventRepository
  parent: TicketApi.Db.Interface
  isExternal: false
  name: IEventRepository
  nameWithType: IEventRepository
  fullName: TicketApi.Db.Interface.IEventRepository
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TicketApi.Db.Interface
  commentId: N:TicketApi.Db.Interface
  isExternal: false
  name: TicketApi.Db.Interface
  nameWithType: TicketApi.Db.Interface
  fullName: TicketApi.Db.Interface
- uid: TicketApi.Db.EventRepository.#ctor*
  commentId: Overload:TicketApi.Db.EventRepository.#ctor
  isExternal: false
  name: EventRepository
  nameWithType: EventRepository.EventRepository
  fullName: TicketApi.Db.EventRepository.EventRepository
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TicketApi.Db.EventRepository.AddEvent*
  commentId: Overload:TicketApi.Db.EventRepository.AddEvent
  isExternal: false
  name: AddEvent
  nameWithType: EventRepository.AddEvent
  fullName: TicketApi.Db.EventRepository.AddEvent
- uid: TicketApi.Db.Interface.IEventRepository.AddEvent(TicketApi.Db.Models.Event)
  commentId: M:TicketApi.Db.Interface.IEventRepository.AddEvent(TicketApi.Db.Models.Event)
  parent: TicketApi.Db.Interface.IEventRepository
  isExternal: false
  name: AddEvent(Event)
  nameWithType: IEventRepository.AddEvent(Event)
  fullName: TicketApi.Db.Interface.IEventRepository.AddEvent(TicketApi.Db.Models.Event)
  spec.csharp:
  - uid: TicketApi.Db.Interface.IEventRepository.AddEvent(TicketApi.Db.Models.Event)
    name: AddEvent
    nameWithType: IEventRepository.AddEvent
    fullName: TicketApi.Db.Interface.IEventRepository.AddEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: TicketApi.Db.Models.Event
    name: Event
    nameWithType: Event
    fullName: TicketApi.Db.Models.Event
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.IEventRepository.AddEvent(TicketApi.Db.Models.Event)
    name: AddEvent
    nameWithType: IEventRepository.AddEvent
    fullName: TicketApi.Db.Interface.IEventRepository.AddEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: TicketApi.Db.Models.Event
    name: Event
    nameWithType: Event
    fullName: TicketApi.Db.Models.Event
  - name: )
    nameWithType: )
    fullName: )
- uid: TicketApi.Db.Models.Event
  commentId: T:TicketApi.Db.Models.Event
  parent: TicketApi.Db.Models
  isExternal: false
  name: Event
  nameWithType: Event
  fullName: TicketApi.Db.Models.Event
- uid: TicketApi.Db.Models
  commentId: N:TicketApi.Db.Models
  isExternal: false
  name: TicketApi.Db.Models
  nameWithType: TicketApi.Db.Models
  fullName: TicketApi.Db.Models
- uid: TicketApi.Db.EventRepository.DeleteEvent*
  commentId: Overload:TicketApi.Db.EventRepository.DeleteEvent
  isExternal: false
  name: DeleteEvent
  nameWithType: EventRepository.DeleteEvent
  fullName: TicketApi.Db.EventRepository.DeleteEvent
- uid: TicketApi.Db.Interface.IEventRepository.DeleteEvent(System.Int32)
  commentId: M:TicketApi.Db.Interface.IEventRepository.DeleteEvent(System.Int32)
  parent: TicketApi.Db.Interface.IEventRepository
  isExternal: true
  name: DeleteEvent(Int32)
  nameWithType: IEventRepository.DeleteEvent(Int32)
  fullName: TicketApi.Db.Interface.IEventRepository.DeleteEvent(System.Int32)
  spec.csharp:
  - uid: TicketApi.Db.Interface.IEventRepository.DeleteEvent(System.Int32)
    name: DeleteEvent
    nameWithType: IEventRepository.DeleteEvent
    fullName: TicketApi.Db.Interface.IEventRepository.DeleteEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.IEventRepository.DeleteEvent(System.Int32)
    name: DeleteEvent
    nameWithType: IEventRepository.DeleteEvent
    fullName: TicketApi.Db.Interface.IEventRepository.DeleteEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TicketApi.Db.EventRepository.GetEventById*
  commentId: Overload:TicketApi.Db.EventRepository.GetEventById
  isExternal: false
  name: GetEventById
  nameWithType: EventRepository.GetEventById
  fullName: TicketApi.Db.EventRepository.GetEventById
- uid: TicketApi.Db.Interface.IEventRepository.GetEventById(System.Int32)
  commentId: M:TicketApi.Db.Interface.IEventRepository.GetEventById(System.Int32)
  parent: TicketApi.Db.Interface.IEventRepository
  isExternal: true
  name: GetEventById(Int32)
  nameWithType: IEventRepository.GetEventById(Int32)
  fullName: TicketApi.Db.Interface.IEventRepository.GetEventById(System.Int32)
  spec.csharp:
  - uid: TicketApi.Db.Interface.IEventRepository.GetEventById(System.Int32)
    name: GetEventById
    nameWithType: IEventRepository.GetEventById
    fullName: TicketApi.Db.Interface.IEventRepository.GetEventById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.IEventRepository.GetEventById(System.Int32)
    name: GetEventById
    nameWithType: IEventRepository.GetEventById
    fullName: TicketApi.Db.Interface.IEventRepository.GetEventById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TicketApi.Db.EventRepository.GetEvents*
  commentId: Overload:TicketApi.Db.EventRepository.GetEvents
  isExternal: false
  name: GetEvents
  nameWithType: EventRepository.GetEvents
  fullName: TicketApi.Db.EventRepository.GetEvents
- uid: TicketApi.Db.Interface.IEventRepository.GetEvents(System.Int32,System.Int32)
  commentId: M:TicketApi.Db.Interface.IEventRepository.GetEvents(System.Int32,System.Int32)
  parent: TicketApi.Db.Interface.IEventRepository
  isExternal: true
  name: GetEvents(Int32, Int32)
  nameWithType: IEventRepository.GetEvents(Int32, Int32)
  fullName: TicketApi.Db.Interface.IEventRepository.GetEvents(System.Int32, System.Int32)
  spec.csharp:
  - uid: TicketApi.Db.Interface.IEventRepository.GetEvents(System.Int32,System.Int32)
    name: GetEvents
    nameWithType: IEventRepository.GetEvents
    fullName: TicketApi.Db.Interface.IEventRepository.GetEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.IEventRepository.GetEvents(System.Int32,System.Int32)
    name: GetEvents
    nameWithType: IEventRepository.GetEvents
    fullName: TicketApi.Db.Interface.IEventRepository.GetEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{TicketApi.Db.Models.Event}
  commentId: T:System.Collections.Generic.List{TicketApi.Db.Models.Event}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Event>
  nameWithType: List<Event>
  fullName: System.Collections.Generic.List<TicketApi.Db.Models.Event>
  nameWithType.vb: List(Of Event)
  fullName.vb: System.Collections.Generic.List(Of TicketApi.Db.Models.Event)
  name.vb: List(Of Event)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketApi.Db.Models.Event
    name: Event
    nameWithType: Event
    fullName: TicketApi.Db.Models.Event
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketApi.Db.Models.Event
    name: Event
    nameWithType: Event
    fullName: TicketApi.Db.Models.Event
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TicketApi.Db.EventRepository.UpdateEvent*
  commentId: Overload:TicketApi.Db.EventRepository.UpdateEvent
  isExternal: false
  name: UpdateEvent
  nameWithType: EventRepository.UpdateEvent
  fullName: TicketApi.Db.EventRepository.UpdateEvent
- uid: TicketApi.Db.Interface.IEventRepository.UpdateEvent(TicketApi.Db.Models.Event)
  commentId: M:TicketApi.Db.Interface.IEventRepository.UpdateEvent(TicketApi.Db.Models.Event)
  parent: TicketApi.Db.Interface.IEventRepository
  isExternal: false
  name: UpdateEvent(Event)
  nameWithType: IEventRepository.UpdateEvent(Event)
  fullName: TicketApi.Db.Interface.IEventRepository.UpdateEvent(TicketApi.Db.Models.Event)
  spec.csharp:
  - uid: TicketApi.Db.Interface.IEventRepository.UpdateEvent(TicketApi.Db.Models.Event)
    name: UpdateEvent
    nameWithType: IEventRepository.UpdateEvent
    fullName: TicketApi.Db.Interface.IEventRepository.UpdateEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: TicketApi.Db.Models.Event
    name: Event
    nameWithType: Event
    fullName: TicketApi.Db.Models.Event
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.IEventRepository.UpdateEvent(TicketApi.Db.Models.Event)
    name: UpdateEvent
    nameWithType: IEventRepository.UpdateEvent
    fullName: TicketApi.Db.Interface.IEventRepository.UpdateEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: TicketApi.Db.Models.Event
    name: Event
    nameWithType: Event
    fullName: TicketApi.Db.Models.Event
  - name: )
    nameWithType: )
    fullName: )
- uid: TicketApi.Db.EventRepository.FindEvents*
  commentId: Overload:TicketApi.Db.EventRepository.FindEvents
  isExternal: false
  name: FindEvents
  nameWithType: EventRepository.FindEvents
  fullName: TicketApi.Db.EventRepository.FindEvents
- uid: TicketApi.Db.Interface.IEventRepository.FindEvents(System.String)
  commentId: M:TicketApi.Db.Interface.IEventRepository.FindEvents(System.String)
  parent: TicketApi.Db.Interface.IEventRepository
  isExternal: true
  name: FindEvents(String)
  nameWithType: IEventRepository.FindEvents(String)
  fullName: TicketApi.Db.Interface.IEventRepository.FindEvents(System.String)
  spec.csharp:
  - uid: TicketApi.Db.Interface.IEventRepository.FindEvents(System.String)
    name: FindEvents
    nameWithType: IEventRepository.FindEvents
    fullName: TicketApi.Db.Interface.IEventRepository.FindEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.IEventRepository.FindEvents(System.String)
    name: FindEvents
    nameWithType: IEventRepository.FindEvents
    fullName: TicketApi.Db.Interface.IEventRepository.FindEvents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
