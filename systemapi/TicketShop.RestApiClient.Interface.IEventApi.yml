### YamlMime:ManagedReference
items:
- uid: TicketShop.RestApiClient.Interface.IEventApi
  commentId: T:TicketShop.RestApiClient.Interface.IEventApi
  id: IEventApi
  parent: TicketShop.RestApiClient.Interface
  children:
  - TicketShop.RestApiClient.Interface.IEventApi.AddEvent(TicketShop.RestApiClient.Model.Event)
  - TicketShop.RestApiClient.Interface.IEventApi.DeleteEvent(System.Int32)
  - TicketShop.RestApiClient.Interface.IEventApi.FindEvents(TicketShop.RestApiClient.Model.Search)
  - TicketShop.RestApiClient.Interface.IEventApi.GetEventById(System.Int32)
  - TicketShop.RestApiClient.Interface.IEventApi.GetEvents(System.Int32,System.Int32)
  - TicketShop.RestApiClient.Interface.IEventApi.UpdateEvent(TicketShop.RestApiClient.Model.Event)
  langs:
  - csharp
  - vb
  name: IEventApi
  nameWithType: IEventApi
  fullName: TicketShop.RestApiClient.Interface.IEventApi
  type: Interface
  source:
    remote:
      path: src/RestApiClient/Interface/IEventApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: IEventApi
    path: src/RestApiClient/Interface/IEventApi.cs
    startLine: 7
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  syntax:
    content: public interface IEventApi
    content.vb: Public Interface IEventApi
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: TicketShop.RestApiClient.Interface.IEventApi.AddEvent(TicketShop.RestApiClient.Model.Event)
  commentId: M:TicketShop.RestApiClient.Interface.IEventApi.AddEvent(TicketShop.RestApiClient.Model.Event)
  id: AddEvent(TicketShop.RestApiClient.Model.Event)
  parent: TicketShop.RestApiClient.Interface.IEventApi
  langs:
  - csharp
  - vb
  name: AddEvent(Event)
  nameWithType: IEventApi.AddEvent(Event)
  fullName: TicketShop.RestApiClient.Interface.IEventApi.AddEvent(TicketShop.RestApiClient.Model.Event)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/IEventApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: AddEvent
    path: src/RestApiClient/Interface/IEventApi.cs
    startLine: 15
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nAdd Event to database\n"
  example: []
  syntax:
    content: Event AddEvent(Event item)
    parameters:
    - id: item
      type: TicketShop.RestApiClient.Model.Event
      description: Event object
    return:
      type: TicketShop.RestApiClient.Model.Event
      description: An Object representation of newly created event
    content.vb: 'Function AddEvent(item As  Event) As '
  overload: TicketShop.RestApiClient.Interface.IEventApi.AddEvent*
- uid: TicketShop.RestApiClient.Interface.IEventApi.GetEvents(System.Int32,System.Int32)
  commentId: M:TicketShop.RestApiClient.Interface.IEventApi.GetEvents(System.Int32,System.Int32)
  id: GetEvents(System.Int32,System.Int32)
  parent: TicketShop.RestApiClient.Interface.IEventApi
  langs:
  - csharp
  - vb
  name: GetEvents(Int32, Int32)
  nameWithType: IEventApi.GetEvents(Int32, Int32)
  fullName: TicketShop.RestApiClient.Interface.IEventApi.GetEvents(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/IEventApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetEvents
    path: src/RestApiClient/Interface/IEventApi.cs
    startLine: 23
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  syntax:
    content: List<Event> GetEvents(int offset = 0, int maxLimit = 20)
    parameters:
    - id: offset
      type: System.Int32
    - id: maxLimit
      type: System.Int32
    return:
      type: System.Collections.Generic.List{TicketShop.RestApiClient.Model.Event}
    content.vb: Function GetEvents(offset As Integer = 0, maxLimit As Integer = 20) As List(Of  Event)
  overload: TicketShop.RestApiClient.Interface.IEventApi.GetEvents*
- uid: TicketShop.RestApiClient.Interface.IEventApi.GetEventById(System.Int32)
  commentId: M:TicketShop.RestApiClient.Interface.IEventApi.GetEventById(System.Int32)
  id: GetEventById(System.Int32)
  parent: TicketShop.RestApiClient.Interface.IEventApi
  langs:
  - csharp
  - vb
  name: GetEventById(Int32)
  nameWithType: IEventApi.GetEventById(Int32)
  fullName: TicketShop.RestApiClient.Interface.IEventApi.GetEventById(System.Int32)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/IEventApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetEventById
    path: src/RestApiClient/Interface/IEventApi.cs
    startLine: 30
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nGet Event by Id\n"
  example: []
  syntax:
    content: Event GetEventById(int id)
    parameters:
    - id: id
      type: System.Int32
      description: Event Id
    return:
      type: TicketShop.RestApiClient.Model.Event
      description: An Object representation of the event
    content.vb: 'Function GetEventById(id As Integer) As '
  overload: TicketShop.RestApiClient.Interface.IEventApi.GetEventById*
- uid: TicketShop.RestApiClient.Interface.IEventApi.UpdateEvent(TicketShop.RestApiClient.Model.Event)
  commentId: M:TicketShop.RestApiClient.Interface.IEventApi.UpdateEvent(TicketShop.RestApiClient.Model.Event)
  id: UpdateEvent(TicketShop.RestApiClient.Model.Event)
  parent: TicketShop.RestApiClient.Interface.IEventApi
  langs:
  - csharp
  - vb
  name: UpdateEvent(Event)
  nameWithType: IEventApi.UpdateEvent(Event)
  fullName: TicketShop.RestApiClient.Interface.IEventApi.UpdateEvent(TicketShop.RestApiClient.Model.Event)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/IEventApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: UpdateEvent
    path: src/RestApiClient/Interface/IEventApi.cs
    startLine: 37
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nUpdate event by Id\n"
  example: []
  syntax:
    content: Event UpdateEvent(Event item)
    parameters:
    - id: item
      type: TicketShop.RestApiClient.Model.Event
      description: Event object
    return:
      type: TicketShop.RestApiClient.Model.Event
      description: '>An Object representation of the updated event'
    content.vb: 'Function UpdateEvent(item As  Event) As '
  overload: TicketShop.RestApiClient.Interface.IEventApi.UpdateEvent*
- uid: TicketShop.RestApiClient.Interface.IEventApi.DeleteEvent(System.Int32)
  commentId: M:TicketShop.RestApiClient.Interface.IEventApi.DeleteEvent(System.Int32)
  id: DeleteEvent(System.Int32)
  parent: TicketShop.RestApiClient.Interface.IEventApi
  langs:
  - csharp
  - vb
  name: DeleteEvent(Int32)
  nameWithType: IEventApi.DeleteEvent(Int32)
  fullName: TicketShop.RestApiClient.Interface.IEventApi.DeleteEvent(System.Int32)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/IEventApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: DeleteEvent
    path: src/RestApiClient/Interface/IEventApi.cs
    startLine: 44
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nDelete Event by Id\n"
  example: []
  syntax:
    content: bool DeleteEvent(int id)
    parameters:
    - id: id
      type: System.Int32
      description: Event ID
    return:
      type: System.Boolean
      description: bool, true if delete succeeded
    content.vb: Function DeleteEvent(id As Integer) As Boolean
  overload: TicketShop.RestApiClient.Interface.IEventApi.DeleteEvent*
- uid: TicketShop.RestApiClient.Interface.IEventApi.FindEvents(TicketShop.RestApiClient.Model.Search)
  commentId: M:TicketShop.RestApiClient.Interface.IEventApi.FindEvents(TicketShop.RestApiClient.Model.Search)
  id: FindEvents(TicketShop.RestApiClient.Model.Search)
  parent: TicketShop.RestApiClient.Interface.IEventApi
  langs:
  - csharp
  - vb
  name: FindEvents(Search)
  nameWithType: IEventApi.FindEvents(Search)
  fullName: TicketShop.RestApiClient.Interface.IEventApi.FindEvents(TicketShop.RestApiClient.Model.Search)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/IEventApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: FindEvents
    path: src/RestApiClient/Interface/IEventApi.cs
    startLine: 51
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nFind Events by search query\n"
  example: []
  syntax:
    content: List<Event> FindEvents(Search query)
    parameters:
    - id: query
      type: TicketShop.RestApiClient.Model.Search
      description: Search object
    return:
      type: System.Collections.Generic.List{TicketShop.RestApiClient.Model.Event}
      description: A list of object representations of Events matching the search query
    content.vb: Function FindEvents(query As Search) As List(Of  Event)
  overload: TicketShop.RestApiClient.Interface.IEventApi.FindEvents*
references:
- uid: TicketShop.RestApiClient.Interface
  commentId: N:TicketShop.RestApiClient.Interface
  isExternal: false
  name: TicketShop.RestApiClient.Interface
  nameWithType: TicketShop.RestApiClient.Interface
  fullName: TicketShop.RestApiClient.Interface
- uid: TicketShop.RestApiClient.Interface.IEventApi.AddEvent*
  commentId: Overload:TicketShop.RestApiClient.Interface.IEventApi.AddEvent
  isExternal: false
  name: AddEvent
  nameWithType: IEventApi.AddEvent
  fullName: TicketShop.RestApiClient.Interface.IEventApi.AddEvent
- uid: TicketShop.RestApiClient.Model.Event
  commentId: T:TicketShop.RestApiClient.Model.Event
  parent: TicketShop.RestApiClient.Model
  isExternal: false
  name: Event
  nameWithType: Event
  fullName: TicketShop.RestApiClient.Model.Event
- uid: TicketShop.RestApiClient.Model
  commentId: N:TicketShop.RestApiClient.Model
  isExternal: false
  name: TicketShop.RestApiClient.Model
  nameWithType: TicketShop.RestApiClient.Model
  fullName: TicketShop.RestApiClient.Model
- uid: TicketShop.RestApiClient.Interface.IEventApi.GetEvents*
  commentId: Overload:TicketShop.RestApiClient.Interface.IEventApi.GetEvents
  isExternal: false
  name: GetEvents
  nameWithType: IEventApi.GetEvents
  fullName: TicketShop.RestApiClient.Interface.IEventApi.GetEvents
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List{TicketShop.RestApiClient.Model.Event}
  commentId: T:System.Collections.Generic.List{TicketShop.RestApiClient.Model.Event}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Event>
  nameWithType: List<Event>
  fullName: System.Collections.Generic.List<TicketShop.RestApiClient.Model.Event>
  nameWithType.vb: List(Of Event)
  fullName.vb: System.Collections.Generic.List(Of TicketShop.RestApiClient.Model.Event)
  name.vb: List(Of Event)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketShop.RestApiClient.Model.Event
    name: Event
    nameWithType: Event
    fullName: TicketShop.RestApiClient.Model.Event
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketShop.RestApiClient.Model.Event
    name: Event
    nameWithType: Event
    fullName: TicketShop.RestApiClient.Model.Event
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TicketShop.RestApiClient.Interface.IEventApi.GetEventById*
  commentId: Overload:TicketShop.RestApiClient.Interface.IEventApi.GetEventById
  isExternal: false
  name: GetEventById
  nameWithType: IEventApi.GetEventById
  fullName: TicketShop.RestApiClient.Interface.IEventApi.GetEventById
- uid: TicketShop.RestApiClient.Interface.IEventApi.UpdateEvent*
  commentId: Overload:TicketShop.RestApiClient.Interface.IEventApi.UpdateEvent
  isExternal: false
  name: UpdateEvent
  nameWithType: IEventApi.UpdateEvent
  fullName: TicketShop.RestApiClient.Interface.IEventApi.UpdateEvent
- uid: TicketShop.RestApiClient.Interface.IEventApi.DeleteEvent*
  commentId: Overload:TicketShop.RestApiClient.Interface.IEventApi.DeleteEvent
  isExternal: false
  name: DeleteEvent
  nameWithType: IEventApi.DeleteEvent
  fullName: TicketShop.RestApiClient.Interface.IEventApi.DeleteEvent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TicketShop.RestApiClient.Interface.IEventApi.FindEvents*
  commentId: Overload:TicketShop.RestApiClient.Interface.IEventApi.FindEvents
  isExternal: false
  name: FindEvents
  nameWithType: IEventApi.FindEvents
  fullName: TicketShop.RestApiClient.Interface.IEventApi.FindEvents
- uid: TicketShop.RestApiClient.Model.Search
  commentId: T:TicketShop.RestApiClient.Model.Search
  parent: TicketShop.RestApiClient.Model
  isExternal: false
  name: Search
  nameWithType: Search
  fullName: TicketShop.RestApiClient.Model.Search
