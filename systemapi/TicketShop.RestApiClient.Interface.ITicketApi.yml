### YamlMime:ManagedReference
items:
- uid: TicketShop.RestApiClient.Interface.ITicketApi
  commentId: T:TicketShop.RestApiClient.Interface.ITicketApi
  id: ITicketApi
  parent: TicketShop.RestApiClient.Interface
  children:
  - TicketShop.RestApiClient.Interface.ITicketApi.AddTicket(TicketShop.RestApiClient.Model.Ticket)
  - TicketShop.RestApiClient.Interface.ITicketApi.AddTicketOrder(TicketShop.RestApiClient.Model.Ticket)
  - TicketShop.RestApiClient.Interface.ITicketApi.DeleteTicket(System.Int32)
  - TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketById(System.Int32)
  - TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketsByTransactionId(System.Int32)
  - TicketShop.RestApiClient.Interface.ITicketApi.GetTicketById(System.Int32)
  - TicketShop.RestApiClient.Interface.ITicketApi.GetTickets(System.Int32,System.Int32)
  - TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByTransactionId(System.Int32,System.Int32,System.Int32)
  - TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByUserId(System.String,System.Int32,System.Int32)
  - TicketShop.RestApiClient.Interface.ITicketApi.UpdateTicket(TicketShop.RestApiClient.Model.Ticket)
  langs:
  - csharp
  - vb
  name: ITicketApi
  nameWithType: ITicketApi
  fullName: TicketShop.RestApiClient.Interface.ITicketApi
  type: Interface
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: ITicketApi
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 5
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  syntax:
    content: public interface ITicketApi
    content.vb: Public Interface ITicketApi
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: TicketShop.RestApiClient.Interface.ITicketApi.AddTicket(TicketShop.RestApiClient.Model.Ticket)
  commentId: M:TicketShop.RestApiClient.Interface.ITicketApi.AddTicket(TicketShop.RestApiClient.Model.Ticket)
  id: AddTicket(TicketShop.RestApiClient.Model.Ticket)
  parent: TicketShop.RestApiClient.Interface.ITicketApi
  langs:
  - csharp
  - vb
  name: AddTicket(Ticket)
  nameWithType: ITicketApi.AddTicket(Ticket)
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.AddTicket(TicketShop.RestApiClient.Model.Ticket)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: AddTicket
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 12
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  syntax:
    content: Ticket AddTicket(Ticket ticket)
    parameters:
    - id: ticket
      type: TicketShop.RestApiClient.Model.Ticket
    return:
      type: TicketShop.RestApiClient.Model.Ticket
    content.vb: Function AddTicket(ticket As Ticket) As Ticket
  overload: TicketShop.RestApiClient.Interface.ITicketApi.AddTicket*
- uid: TicketShop.RestApiClient.Interface.ITicketApi.AddTicketOrder(TicketShop.RestApiClient.Model.Ticket)
  commentId: M:TicketShop.RestApiClient.Interface.ITicketApi.AddTicketOrder(TicketShop.RestApiClient.Model.Ticket)
  id: AddTicketOrder(TicketShop.RestApiClient.Model.Ticket)
  parent: TicketShop.RestApiClient.Interface.ITicketApi
  langs:
  - csharp
  - vb
  name: AddTicketOrder(Ticket)
  nameWithType: ITicketApi.AddTicketOrder(Ticket)
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.AddTicketOrder(TicketShop.RestApiClient.Model.Ticket)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: AddTicketOrder
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 19
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nAdd new ticket and connect to transaction\n"
  example: []
  syntax:
    content: Ticket AddTicketOrder(Ticket ticket)
    parameters:
    - id: ticket
      type: TicketShop.RestApiClient.Model.Ticket
      description: ticket object
    return:
      type: TicketShop.RestApiClient.Model.Ticket
      description: Ticket object
    content.vb: Function AddTicketOrder(ticket As Ticket) As Ticket
  overload: TicketShop.RestApiClient.Interface.ITicketApi.AddTicketOrder*
- uid: TicketShop.RestApiClient.Interface.ITicketApi.UpdateTicket(TicketShop.RestApiClient.Model.Ticket)
  commentId: M:TicketShop.RestApiClient.Interface.ITicketApi.UpdateTicket(TicketShop.RestApiClient.Model.Ticket)
  id: UpdateTicket(TicketShop.RestApiClient.Model.Ticket)
  parent: TicketShop.RestApiClient.Interface.ITicketApi
  langs:
  - csharp
  - vb
  name: UpdateTicket(Ticket)
  nameWithType: ITicketApi.UpdateTicket(Ticket)
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.UpdateTicket(TicketShop.RestApiClient.Model.Ticket)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: UpdateTicket
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 26
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nUpdate a ticket\n"
  example: []
  syntax:
    content: Ticket UpdateTicket(Ticket ticket)
    parameters:
    - id: ticket
      type: TicketShop.RestApiClient.Model.Ticket
      description: Ticket object
    return:
      type: TicketShop.RestApiClient.Model.Ticket
      description: An object representation of the updated ticket
    content.vb: Function UpdateTicket(ticket As Ticket) As Ticket
  overload: TicketShop.RestApiClient.Interface.ITicketApi.UpdateTicket*
- uid: TicketShop.RestApiClient.Interface.ITicketApi.DeleteTicket(System.Int32)
  commentId: M:TicketShop.RestApiClient.Interface.ITicketApi.DeleteTicket(System.Int32)
  id: DeleteTicket(System.Int32)
  parent: TicketShop.RestApiClient.Interface.ITicketApi
  langs:
  - csharp
  - vb
  name: DeleteTicket(Int32)
  nameWithType: ITicketApi.DeleteTicket(Int32)
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.DeleteTicket(System.Int32)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: DeleteTicket
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 33
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nDelete a ticket\n"
  example: []
  syntax:
    content: bool DeleteTicket(int ticketId)
    parameters:
    - id: ticketId
      type: System.Int32
    return:
      type: System.Boolean
      description: 'bool, true if deleted, false if not '
    content.vb: Function DeleteTicket(ticketId As Integer) As Boolean
  overload: TicketShop.RestApiClient.Interface.ITicketApi.DeleteTicket*
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetTickets(System.Int32,System.Int32)
  commentId: M:TicketShop.RestApiClient.Interface.ITicketApi.GetTickets(System.Int32,System.Int32)
  id: GetTickets(System.Int32,System.Int32)
  parent: TicketShop.RestApiClient.Interface.ITicketApi
  langs:
  - csharp
  - vb
  name: GetTickets(Int32, Int32)
  nameWithType: ITicketApi.GetTickets(Int32, Int32)
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetTickets(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetTickets
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 41
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nGet tickets\n"
  example: []
  syntax:
    content: List<Ticket> GetTickets(int offset = 0, int maxLimit = 20)
    parameters:
    - id: offset
      type: System.Int32
      description: Result set offset
    - id: maxLimit
      type: System.Int32
      description: Max number of result to fetch
    return:
      type: System.Collections.Generic.List{TicketShop.RestApiClient.Model.Ticket}
      description: A list of ticket object representations
    content.vb: Function GetTickets(offset As Integer = 0, maxLimit As Integer = 20) As List(Of Ticket)
  overload: TicketShop.RestApiClient.Interface.ITicketApi.GetTickets*
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByUserId(System.String,System.Int32,System.Int32)
  commentId: M:TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByUserId(System.String,System.Int32,System.Int32)
  id: GetTicketsByUserId(System.String,System.Int32,System.Int32)
  parent: TicketShop.RestApiClient.Interface.ITicketApi
  langs:
  - csharp
  - vb
  name: GetTicketsByUserId(String, Int32, Int32)
  nameWithType: ITicketApi.GetTicketsByUserId(String, Int32, Int32)
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByUserId(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetTicketsByUserId
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 50
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nGet tickets from user\n"
  example: []
  syntax:
    content: List<Ticket> GetTicketsByUserId(string userId, int offset = 0, int maxLimit = 20)
    parameters:
    - id: userId
      type: System.String
      description: User Id
    - id: offset
      type: System.Int32
      description: Result set offset
    - id: maxLimit
      type: System.Int32
      description: Max number of result to fetch
    return:
      type: System.Collections.Generic.List{TicketShop.RestApiClient.Model.Ticket}
      description: A list of ticket object representations for user
    content.vb: Function GetTicketsByUserId(userId As String, offset As Integer = 0, maxLimit As Integer = 20) As List(Of Ticket)
  overload: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByUserId*
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByTransactionId(System.Int32,System.Int32,System.Int32)
  commentId: M:TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByTransactionId(System.Int32,System.Int32,System.Int32)
  id: GetTicketsByTransactionId(System.Int32,System.Int32,System.Int32)
  parent: TicketShop.RestApiClient.Interface.ITicketApi
  langs:
  - csharp
  - vb
  name: GetTicketsByTransactionId(Int32, Int32, Int32)
  nameWithType: ITicketApi.GetTicketsByTransactionId(Int32, Int32, Int32)
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByTransactionId(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetTicketsByTransactionId
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 59
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nGet tickets by transactionID\n"
  example: []
  syntax:
    content: List<Ticket> GetTicketsByTransactionId(int transactionId, int offset = 0, int maxLimit = 20)
    parameters:
    - id: transactionId
      type: System.Int32
      description: Transaction ID to look for
    - id: offset
      type: System.Int32
      description: Result set offset
    - id: maxLimit
      type: System.Int32
      description: Max number of result to fetch
    return:
      type: System.Collections.Generic.List{TicketShop.RestApiClient.Model.Ticket}
      description: A list of ticket object representations for a Transaction
    content.vb: Function GetTicketsByTransactionId(transactionId As Integer, offset As Integer = 0, maxLimit As Integer = 20) As List(Of Ticket)
  overload: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByTransactionId*
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketById(System.Int32)
  commentId: M:TicketShop.RestApiClient.Interface.ITicketApi.GetTicketById(System.Int32)
  id: GetTicketById(System.Int32)
  parent: TicketShop.RestApiClient.Interface.ITicketApi
  langs:
  - csharp
  - vb
  name: GetTicketById(Int32)
  nameWithType: ITicketApi.GetTicketById(Int32)
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketById(System.Int32)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetTicketById
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 65
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  summary: "\nGet ticket by Id\n"
  example: []
  syntax:
    content: Ticket GetTicketById(int id)
    parameters:
    - id: id
      type: System.Int32
      description: Id of the ticket
    return:
      type: TicketShop.RestApiClient.Model.Ticket
      description: An object representation of the ticket
    content.vb: Function GetTicketById(id As Integer) As Ticket
  overload: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketById*
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketById(System.Int32)
  commentId: M:TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketById(System.Int32)
  id: GetFullTicketById(System.Int32)
  parent: TicketShop.RestApiClient.Interface.ITicketApi
  langs:
  - csharp
  - vb
  name: GetFullTicketById(Int32)
  nameWithType: ITicketApi.GetFullTicketById(Int32)
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketById(System.Int32)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetFullTicketById
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 67
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  syntax:
    content: FullTicket GetFullTicketById(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: TicketShop.RestApiClient.Model.FullTicket
    content.vb: Function GetFullTicketById(id As Integer) As FullTicket
  overload: TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketById*
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketsByTransactionId(System.Int32)
  commentId: M:TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketsByTransactionId(System.Int32)
  id: GetFullTicketsByTransactionId(System.Int32)
  parent: TicketShop.RestApiClient.Interface.ITicketApi
  langs:
  - csharp
  - vb
  name: GetFullTicketsByTransactionId(Int32)
  nameWithType: ITicketApi.GetFullTicketsByTransactionId(Int32)
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketsByTransactionId(System.Int32)
  type: Method
  source:
    remote:
      path: src/RestApiClient/Interface/ITicketApi.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetFullTicketsByTransactionId
    path: src/RestApiClient/Interface/ITicketApi.cs
    startLine: 68
  assemblies:
  - RestApiClient
  namespace: TicketShop.RestApiClient.Interface
  syntax:
    content: List<FullTicket> GetFullTicketsByTransactionId(int transactionId)
    parameters:
    - id: transactionId
      type: System.Int32
    return:
      type: System.Collections.Generic.List{TicketShop.RestApiClient.Model.FullTicket}
    content.vb: Function GetFullTicketsByTransactionId(transactionId As Integer) As List(Of FullTicket)
  overload: TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketsByTransactionId*
references:
- uid: TicketShop.RestApiClient.Interface
  commentId: N:TicketShop.RestApiClient.Interface
  isExternal: false
  name: TicketShop.RestApiClient.Interface
  nameWithType: TicketShop.RestApiClient.Interface
  fullName: TicketShop.RestApiClient.Interface
- uid: TicketShop.RestApiClient.Interface.ITicketApi.AddTicket*
  commentId: Overload:TicketShop.RestApiClient.Interface.ITicketApi.AddTicket
  isExternal: false
  name: AddTicket
  nameWithType: ITicketApi.AddTicket
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.AddTicket
- uid: TicketShop.RestApiClient.Model.Ticket
  commentId: T:TicketShop.RestApiClient.Model.Ticket
  parent: TicketShop.RestApiClient.Model
  isExternal: false
  name: Ticket
  nameWithType: Ticket
  fullName: TicketShop.RestApiClient.Model.Ticket
- uid: TicketShop.RestApiClient.Model
  commentId: N:TicketShop.RestApiClient.Model
  isExternal: false
  name: TicketShop.RestApiClient.Model
  nameWithType: TicketShop.RestApiClient.Model
  fullName: TicketShop.RestApiClient.Model
- uid: TicketShop.RestApiClient.Interface.ITicketApi.AddTicketOrder*
  commentId: Overload:TicketShop.RestApiClient.Interface.ITicketApi.AddTicketOrder
  isExternal: false
  name: AddTicketOrder
  nameWithType: ITicketApi.AddTicketOrder
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.AddTicketOrder
- uid: TicketShop.RestApiClient.Interface.ITicketApi.UpdateTicket*
  commentId: Overload:TicketShop.RestApiClient.Interface.ITicketApi.UpdateTicket
  isExternal: false
  name: UpdateTicket
  nameWithType: ITicketApi.UpdateTicket
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.UpdateTicket
- uid: TicketShop.RestApiClient.Interface.ITicketApi.DeleteTicket*
  commentId: Overload:TicketShop.RestApiClient.Interface.ITicketApi.DeleteTicket
  isExternal: false
  name: DeleteTicket
  nameWithType: ITicketApi.DeleteTicket
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.DeleteTicket
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetTickets*
  commentId: Overload:TicketShop.RestApiClient.Interface.ITicketApi.GetTickets
  isExternal: false
  name: GetTickets
  nameWithType: ITicketApi.GetTickets
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetTickets
- uid: System.Collections.Generic.List{TicketShop.RestApiClient.Model.Ticket}
  commentId: T:System.Collections.Generic.List{TicketShop.RestApiClient.Model.Ticket}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Ticket>
  nameWithType: List<Ticket>
  fullName: System.Collections.Generic.List<TicketShop.RestApiClient.Model.Ticket>
  nameWithType.vb: List(Of Ticket)
  fullName.vb: System.Collections.Generic.List(Of TicketShop.RestApiClient.Model.Ticket)
  name.vb: List(Of Ticket)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketShop.RestApiClient.Model.Ticket
    name: Ticket
    nameWithType: Ticket
    fullName: TicketShop.RestApiClient.Model.Ticket
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketShop.RestApiClient.Model.Ticket
    name: Ticket
    nameWithType: Ticket
    fullName: TicketShop.RestApiClient.Model.Ticket
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByUserId*
  commentId: Overload:TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByUserId
  isExternal: false
  name: GetTicketsByUserId
  nameWithType: ITicketApi.GetTicketsByUserId
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByUserId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByTransactionId*
  commentId: Overload:TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByTransactionId
  isExternal: false
  name: GetTicketsByTransactionId
  nameWithType: ITicketApi.GetTicketsByTransactionId
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketsByTransactionId
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketById*
  commentId: Overload:TicketShop.RestApiClient.Interface.ITicketApi.GetTicketById
  isExternal: false
  name: GetTicketById
  nameWithType: ITicketApi.GetTicketById
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetTicketById
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketById*
  commentId: Overload:TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketById
  isExternal: false
  name: GetFullTicketById
  nameWithType: ITicketApi.GetFullTicketById
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketById
- uid: TicketShop.RestApiClient.Model.FullTicket
  commentId: T:TicketShop.RestApiClient.Model.FullTicket
  parent: TicketShop.RestApiClient.Model
  isExternal: false
  name: FullTicket
  nameWithType: FullTicket
  fullName: TicketShop.RestApiClient.Model.FullTicket
- uid: TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketsByTransactionId*
  commentId: Overload:TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketsByTransactionId
  isExternal: false
  name: GetFullTicketsByTransactionId
  nameWithType: ITicketApi.GetFullTicketsByTransactionId
  fullName: TicketShop.RestApiClient.Interface.ITicketApi.GetFullTicketsByTransactionId
- uid: System.Collections.Generic.List{TicketShop.RestApiClient.Model.FullTicket}
  commentId: T:System.Collections.Generic.List{TicketShop.RestApiClient.Model.FullTicket}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<FullTicket>
  nameWithType: List<FullTicket>
  fullName: System.Collections.Generic.List<TicketShop.RestApiClient.Model.FullTicket>
  nameWithType.vb: List(Of FullTicket)
  fullName.vb: System.Collections.Generic.List(Of TicketShop.RestApiClient.Model.FullTicket)
  name.vb: List(Of FullTicket)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketShop.RestApiClient.Model.FullTicket
    name: FullTicket
    nameWithType: FullTicket
    fullName: TicketShop.RestApiClient.Model.FullTicket
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketShop.RestApiClient.Model.FullTicket
    name: FullTicket
    nameWithType: FullTicket
    fullName: TicketShop.RestApiClient.Model.FullTicket
  - name: )
    nameWithType: )
    fullName: )
