### YamlMime:ManagedReference
items:
- uid: TicketApi.Db.Interface.ITransactionRepository
  commentId: T:TicketApi.Db.Interface.ITransactionRepository
  id: ITransactionRepository
  parent: TicketApi.Db.Interface
  children:
  - TicketApi.Db.Interface.ITransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  - TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById(System.Int32)
  - TicketApi.Db.Interface.ITransactionRepository.FindTransactions(System.String)
  - TicketApi.Db.Interface.ITransactionRepository.GetTransactionById(System.Int32)
  - TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId(System.String)
  - TicketApi.Db.Interface.ITransactionRepository.GetTransactions(System.Int32,System.Int32)
  - TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  langs:
  - csharp
  - vb
  name: ITransactionRepository
  nameWithType: ITransactionRepository
  fullName: TicketApi.Db.Interface.ITransactionRepository
  type: Interface
  source:
    remote:
      path: src/DbRepository/Interface/ITransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: ITransactionRepository
    path: src/DbRepository/Interface/ITransactionRepository.cs
    startLine: 7
  assemblies:
  - DbRepository
  namespace: TicketApi.Db.Interface
  syntax:
    content: public interface ITransactionRepository
    content.vb: Public Interface ITransactionRepository
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactions(System.Int32,System.Int32)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.GetTransactions(System.Int32,System.Int32)
  id: GetTransactions(System.Int32,System.Int32)
  parent: TicketApi.Db.Interface.ITransactionRepository
  langs:
  - csharp
  - vb
  name: GetTransactions(Int32, Int32)
  nameWithType: ITransactionRepository.GetTransactions(Int32, Int32)
  fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactions(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/DbRepository/Interface/ITransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetTransactions
    path: src/DbRepository/Interface/ITransactionRepository.cs
    startLine: 15
  assemblies:
  - DbRepository
  namespace: TicketApi.Db.Interface
  summary: "\nGet transactions from db\n"
  example: []
  syntax:
    content: List<Transaction> GetTransactions(int offset = 0, int maxLimit = 20)
    parameters:
    - id: offset
      type: System.Int32
      description: result set offset
    - id: maxLimit
      type: System.Int32
      description: Max rows to fetch
    return:
      type: System.Collections.Generic.List{TicketApi.Db.Models.Transaction}
      description: A list of object representations of Transactions
    content.vb: Function GetTransactions(offset As Integer = 0, maxLimit As Integer = 20) As List(Of Transaction)
  overload: TicketApi.Db.Interface.ITransactionRepository.GetTransactions*
- uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById(System.Int32)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.GetTransactionById(System.Int32)
  id: GetTransactionById(System.Int32)
  parent: TicketApi.Db.Interface.ITransactionRepository
  langs:
  - csharp
  - vb
  name: GetTransactionById(Int32)
  nameWithType: ITransactionRepository.GetTransactionById(Int32)
  fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById(System.Int32)
  type: Method
  source:
    remote:
      path: src/DbRepository/Interface/ITransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetTransactionById
    path: src/DbRepository/Interface/ITransactionRepository.cs
    startLine: 21
  assemblies:
  - DbRepository
  namespace: TicketApi.Db.Interface
  summary: "\nGet Transaction by Id\n"
  example: []
  syntax:
    content: Transaction GetTransactionById(int transactionId)
    parameters:
    - id: transactionId
      type: System.Int32
      description: ID of Transaction
    return:
      type: TicketApi.Db.Models.Transaction
      description: An object representation of the Transaction
    content.vb: Function GetTransactionById(transactionId As Integer) As Transaction
  overload: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById*
- uid: TicketApi.Db.Interface.ITransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  id: AddTransaction(TicketApi.Db.Models.Transaction)
  parent: TicketApi.Db.Interface.ITransactionRepository
  langs:
  - csharp
  - vb
  name: AddTransaction(Transaction)
  nameWithType: ITransactionRepository.AddTransaction(Transaction)
  fullName: TicketApi.Db.Interface.ITransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  type: Method
  source:
    remote:
      path: src/DbRepository/Interface/ITransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: AddTransaction
    path: src/DbRepository/Interface/ITransactionRepository.cs
    startLine: 28
  assemblies:
  - DbRepository
  namespace: TicketApi.Db.Interface
  summary: "\nAdd new Transaction\n"
  example: []
  syntax:
    content: Transaction AddTransaction(Transaction transaction)
    parameters:
    - id: transaction
      type: TicketApi.Db.Models.Transaction
      description: An object representation of the Transaction to create in Database
    return:
      type: TicketApi.Db.Models.Transaction
      description: An object representation of the created Transaction
    content.vb: Function AddTransaction(transaction As Transaction) As Transaction
  overload: TicketApi.Db.Interface.ITransactionRepository.AddTransaction*
- uid: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  id: UpdateTransaction(TicketApi.Db.Models.Transaction)
  parent: TicketApi.Db.Interface.ITransactionRepository
  langs:
  - csharp
  - vb
  name: UpdateTransaction(Transaction)
  nameWithType: ITransactionRepository.UpdateTransaction(Transaction)
  fullName: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  type: Method
  source:
    remote:
      path: src/DbRepository/Interface/ITransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: UpdateTransaction
    path: src/DbRepository/Interface/ITransactionRepository.cs
    startLine: 35
  assemblies:
  - DbRepository
  namespace: TicketApi.Db.Interface
  summary: "\nUpdate a transaction by Id\n"
  example: []
  syntax:
    content: Transaction UpdateTransaction(Transaction transaction)
    parameters:
    - id: transaction
      type: TicketApi.Db.Models.Transaction
      description: Transaction Object
    return:
      type: TicketApi.Db.Models.Transaction
      description: An object representation of the updated Transaction
    content.vb: Function UpdateTransaction(transaction As Transaction) As Transaction
  overload: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction*
- uid: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById(System.Int32)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById(System.Int32)
  id: DeleteTransactionById(System.Int32)
  parent: TicketApi.Db.Interface.ITransactionRepository
  langs:
  - csharp
  - vb
  name: DeleteTransactionById(Int32)
  nameWithType: ITransactionRepository.DeleteTransactionById(Int32)
  fullName: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById(System.Int32)
  type: Method
  source:
    remote:
      path: src/DbRepository/Interface/ITransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: DeleteTransactionById
    path: src/DbRepository/Interface/ITransactionRepository.cs
    startLine: 40
  assemblies:
  - DbRepository
  namespace: TicketApi.Db.Interface
  summary: "\nDelete a transaction\n"
  example: []
  syntax:
    content: bool DeleteTransactionById(int transactionId)
    parameters:
    - id: transactionId
      type: System.Int32
      description: Transaction Id
    return:
      type: System.Boolean
    content.vb: Function DeleteTransactionById(transactionId As Integer) As Boolean
  overload: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById*
- uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId(System.String)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId(System.String)
  id: GetTransactionByUserId(System.String)
  parent: TicketApi.Db.Interface.ITransactionRepository
  langs:
  - csharp
  - vb
  name: GetTransactionByUserId(String)
  nameWithType: ITransactionRepository.GetTransactionByUserId(String)
  fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId(System.String)
  type: Method
  source:
    remote:
      path: src/DbRepository/Interface/ITransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetTransactionByUserId
    path: src/DbRepository/Interface/ITransactionRepository.cs
    startLine: 47
  assemblies:
  - DbRepository
  namespace: TicketApi.Db.Interface
  summary: "\nGet Transactions by User Id\n"
  example: []
  syntax:
    content: List<Transaction> GetTransactionByUserId(string userId)
    parameters:
    - id: userId
      type: System.String
      description: User Id
    return:
      type: System.Collections.Generic.List{TicketApi.Db.Models.Transaction}
      description: A list of object representations of the Transactions
    content.vb: Function GetTransactionByUserId(userId As String) As List(Of Transaction)
  overload: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId*
- uid: TicketApi.Db.Interface.ITransactionRepository.FindTransactions(System.String)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.FindTransactions(System.String)
  id: FindTransactions(System.String)
  parent: TicketApi.Db.Interface.ITransactionRepository
  langs:
  - csharp
  - vb
  name: FindTransactions(String)
  nameWithType: ITransactionRepository.FindTransactions(String)
  fullName: TicketApi.Db.Interface.ITransactionRepository.FindTransactions(System.String)
  type: Method
  source:
    remote:
      path: src/DbRepository/Interface/ITransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: FindTransactions
    path: src/DbRepository/Interface/ITransactionRepository.cs
    startLine: 54
  assemblies:
  - DbRepository
  namespace: TicketApi.Db.Interface
  summary: "\nFind transactions matching the query\n"
  example: []
  syntax:
    content: List<Transaction> FindTransactions(string searchStr)
    parameters:
    - id: searchStr
      type: System.String
      description: Search query
    return:
      type: System.Collections.Generic.List{TicketApi.Db.Models.Transaction}
      description: A list of object representations of Transactions
    content.vb: Function FindTransactions(searchStr As String) As List(Of Transaction)
  overload: TicketApi.Db.Interface.ITransactionRepository.FindTransactions*
references:
- uid: TicketApi.Db.Interface
  commentId: N:TicketApi.Db.Interface
  isExternal: false
  name: TicketApi.Db.Interface
  nameWithType: TicketApi.Db.Interface
  fullName: TicketApi.Db.Interface
- uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactions*
  commentId: Overload:TicketApi.Db.Interface.ITransactionRepository.GetTransactions
  isExternal: false
  name: GetTransactions
  nameWithType: ITransactionRepository.GetTransactions
  fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactions
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List{TicketApi.Db.Models.Transaction}
  commentId: T:System.Collections.Generic.List{TicketApi.Db.Models.Transaction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Transaction>
  nameWithType: List<Transaction>
  fullName: System.Collections.Generic.List<TicketApi.Db.Models.Transaction>
  nameWithType.vb: List(Of Transaction)
  fullName.vb: System.Collections.Generic.List(Of TicketApi.Db.Models.Transaction)
  name.vb: List(Of Transaction)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketApi.Db.Models.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: TicketApi.Db.Models.Transaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketApi.Db.Models.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: TicketApi.Db.Models.Transaction
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById*
  commentId: Overload:TicketApi.Db.Interface.ITransactionRepository.GetTransactionById
  isExternal: false
  name: GetTransactionById
  nameWithType: ITransactionRepository.GetTransactionById
  fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById
- uid: TicketApi.Db.Models.Transaction
  commentId: T:TicketApi.Db.Models.Transaction
  parent: TicketApi.Db.Models
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: TicketApi.Db.Models.Transaction
- uid: TicketApi.Db.Models
  commentId: N:TicketApi.Db.Models
  isExternal: false
  name: TicketApi.Db.Models
  nameWithType: TicketApi.Db.Models
  fullName: TicketApi.Db.Models
- uid: TicketApi.Db.Interface.ITransactionRepository.AddTransaction*
  commentId: Overload:TicketApi.Db.Interface.ITransactionRepository.AddTransaction
  isExternal: false
  name: AddTransaction
  nameWithType: ITransactionRepository.AddTransaction
  fullName: TicketApi.Db.Interface.ITransactionRepository.AddTransaction
- uid: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction*
  commentId: Overload:TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction
  isExternal: false
  name: UpdateTransaction
  nameWithType: ITransactionRepository.UpdateTransaction
  fullName: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction
- uid: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById*
  commentId: Overload:TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById
  isExternal: false
  name: DeleteTransactionById
  nameWithType: ITransactionRepository.DeleteTransactionById
  fullName: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId*
  commentId: Overload:TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId
  isExternal: false
  name: GetTransactionByUserId
  nameWithType: ITransactionRepository.GetTransactionByUserId
  fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TicketApi.Db.Interface.ITransactionRepository.FindTransactions*
  commentId: Overload:TicketApi.Db.Interface.ITransactionRepository.FindTransactions
  isExternal: false
  name: FindTransactions
  nameWithType: ITransactionRepository.FindTransactions
  fullName: TicketApi.Db.Interface.ITransactionRepository.FindTransactions
