### YamlMime:ManagedReference
items:
- uid: TicketApi.Db.TransactionRepository
  commentId: T:TicketApi.Db.TransactionRepository
  id: TransactionRepository
  parent: TicketApi.Db
  children:
  - TicketApi.Db.TransactionRepository.#ctor(System.String)
  - TicketApi.Db.TransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  - TicketApi.Db.TransactionRepository.DeleteTransactionById(System.Int32)
  - TicketApi.Db.TransactionRepository.FindTransactions(System.String)
  - TicketApi.Db.TransactionRepository.GetTransactionById(System.Int32)
  - TicketApi.Db.TransactionRepository.GetTransactionByUserId(System.String)
  - TicketApi.Db.TransactionRepository.GetTransactions(System.Int32,System.Int32)
  - TicketApi.Db.TransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  langs:
  - csharp
  - vb
  name: TransactionRepository
  nameWithType: TransactionRepository
  fullName: TicketApi.Db.TransactionRepository
  type: Class
  source:
    remote:
      path: src/DbRepository/TransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: TransactionRepository
    path: src/DbRepository/TransactionRepository.cs
    startLine: 14
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: 'public class TransactionRepository : ITransactionRepository'
    content.vb: >-
      Public Class TransactionRepository
          Implements ITransactionRepository
  inheritance:
  - System.Object
  implements:
  - TicketApi.Db.Interface.ITransactionRepository
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TicketApi.Db.TransactionRepository.#ctor(System.String)
  commentId: M:TicketApi.Db.TransactionRepository.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: TicketApi.Db.TransactionRepository
  langs:
  - csharp
  - vb
  name: TransactionRepository(String)
  nameWithType: TransactionRepository.TransactionRepository(String)
  fullName: TicketApi.Db.TransactionRepository.TransactionRepository(System.String)
  type: Constructor
  source:
    remote:
      path: src/DbRepository/TransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: .ctor
    path: src/DbRepository/TransactionRepository.cs
    startLine: 18
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public TransactionRepository(string connectionString)
    parameters:
    - id: connectionString
      type: System.String
    content.vb: Public Sub New(connectionString As String)
  overload: TicketApi.Db.TransactionRepository.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.TransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  commentId: M:TicketApi.Db.TransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  id: AddTransaction(TicketApi.Db.Models.Transaction)
  parent: TicketApi.Db.TransactionRepository
  langs:
  - csharp
  - vb
  name: AddTransaction(Transaction)
  nameWithType: TransactionRepository.AddTransaction(Transaction)
  fullName: TicketApi.Db.TransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  type: Method
  source:
    remote:
      path: src/DbRepository/TransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: AddTransaction
    path: src/DbRepository/TransactionRepository.cs
    startLine: 22
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public Transaction AddTransaction(Transaction transaction)
    parameters:
    - id: transaction
      type: TicketApi.Db.Models.Transaction
    return:
      type: TicketApi.Db.Models.Transaction
    content.vb: Public Function AddTransaction(transaction As Transaction) As Transaction
  overload: TicketApi.Db.TransactionRepository.AddTransaction*
  implements:
  - TicketApi.Db.Interface.ITransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.TransactionRepository.DeleteTransactionById(System.Int32)
  commentId: M:TicketApi.Db.TransactionRepository.DeleteTransactionById(System.Int32)
  id: DeleteTransactionById(System.Int32)
  parent: TicketApi.Db.TransactionRepository
  langs:
  - csharp
  - vb
  name: DeleteTransactionById(Int32)
  nameWithType: TransactionRepository.DeleteTransactionById(Int32)
  fullName: TicketApi.Db.TransactionRepository.DeleteTransactionById(System.Int32)
  type: Method
  source:
    remote:
      path: src/DbRepository/TransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: DeleteTransactionById
    path: src/DbRepository/TransactionRepository.cs
    startLine: 47
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public bool DeleteTransactionById(int transactionId)
    parameters:
    - id: transactionId
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function DeleteTransactionById(transactionId As Integer) As Boolean
  overload: TicketApi.Db.TransactionRepository.DeleteTransactionById*
  implements:
  - TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.TransactionRepository.GetTransactionById(System.Int32)
  commentId: M:TicketApi.Db.TransactionRepository.GetTransactionById(System.Int32)
  id: GetTransactionById(System.Int32)
  parent: TicketApi.Db.TransactionRepository
  langs:
  - csharp
  - vb
  name: GetTransactionById(Int32)
  nameWithType: TransactionRepository.GetTransactionById(Int32)
  fullName: TicketApi.Db.TransactionRepository.GetTransactionById(System.Int32)
  type: Method
  source:
    remote:
      path: src/DbRepository/TransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetTransactionById
    path: src/DbRepository/TransactionRepository.cs
    startLine: 64
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public Transaction GetTransactionById(int transactionId)
    parameters:
    - id: transactionId
      type: System.Int32
    return:
      type: TicketApi.Db.Models.Transaction
    content.vb: Public Function GetTransactionById(transactionId As Integer) As Transaction
  overload: TicketApi.Db.TransactionRepository.GetTransactionById*
  implements:
  - TicketApi.Db.Interface.ITransactionRepository.GetTransactionById(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.TransactionRepository.GetTransactionByUserId(System.String)
  commentId: M:TicketApi.Db.TransactionRepository.GetTransactionByUserId(System.String)
  id: GetTransactionByUserId(System.String)
  parent: TicketApi.Db.TransactionRepository
  langs:
  - csharp
  - vb
  name: GetTransactionByUserId(String)
  nameWithType: TransactionRepository.GetTransactionByUserId(String)
  fullName: TicketApi.Db.TransactionRepository.GetTransactionByUserId(System.String)
  type: Method
  source:
    remote:
      path: src/DbRepository/TransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetTransactionByUserId
    path: src/DbRepository/TransactionRepository.cs
    startLine: 80
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public List<Transaction> GetTransactionByUserId(string userId)
    parameters:
    - id: userId
      type: System.String
    return:
      type: System.Collections.Generic.List{TicketApi.Db.Models.Transaction}
    content.vb: Public Function GetTransactionByUserId(userId As String) As List(Of Transaction)
  overload: TicketApi.Db.TransactionRepository.GetTransactionByUserId*
  implements:
  - TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.TransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  commentId: M:TicketApi.Db.TransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  id: UpdateTransaction(TicketApi.Db.Models.Transaction)
  parent: TicketApi.Db.TransactionRepository
  langs:
  - csharp
  - vb
  name: UpdateTransaction(Transaction)
  nameWithType: TransactionRepository.UpdateTransaction(Transaction)
  fullName: TicketApi.Db.TransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  type: Method
  source:
    remote:
      path: src/DbRepository/TransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: UpdateTransaction
    path: src/DbRepository/TransactionRepository.cs
    startLine: 96
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public Transaction UpdateTransaction(Transaction transaction)
    parameters:
    - id: transaction
      type: TicketApi.Db.Models.Transaction
    return:
      type: TicketApi.Db.Models.Transaction
    content.vb: Public Function UpdateTransaction(transaction As Transaction) As Transaction
  overload: TicketApi.Db.TransactionRepository.UpdateTransaction*
  implements:
  - TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.TransactionRepository.FindTransactions(System.String)
  commentId: M:TicketApi.Db.TransactionRepository.FindTransactions(System.String)
  id: FindTransactions(System.String)
  parent: TicketApi.Db.TransactionRepository
  langs:
  - csharp
  - vb
  name: FindTransactions(String)
  nameWithType: TransactionRepository.FindTransactions(String)
  fullName: TicketApi.Db.TransactionRepository.FindTransactions(System.String)
  type: Method
  source:
    remote:
      path: src/DbRepository/TransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: FindTransactions
    path: src/DbRepository/TransactionRepository.cs
    startLine: 122
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public List<Transaction> FindTransactions(string searchStr)
    parameters:
    - id: searchStr
      type: System.String
    return:
      type: System.Collections.Generic.List{TicketApi.Db.Models.Transaction}
    content.vb: Public Function FindTransactions(searchStr As String) As List(Of Transaction)
  overload: TicketApi.Db.TransactionRepository.FindTransactions*
  implements:
  - TicketApi.Db.Interface.ITransactionRepository.FindTransactions(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TicketApi.Db.TransactionRepository.GetTransactions(System.Int32,System.Int32)
  commentId: M:TicketApi.Db.TransactionRepository.GetTransactions(System.Int32,System.Int32)
  id: GetTransactions(System.Int32,System.Int32)
  parent: TicketApi.Db.TransactionRepository
  langs:
  - csharp
  - vb
  name: GetTransactions(Int32, Int32)
  nameWithType: TransactionRepository.GetTransactions(Int32, Int32)
  fullName: TicketApi.Db.TransactionRepository.GetTransactions(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/DbRepository/TransactionRepository.cs
      branch: features/ticketshop
      repo: https://github.com/erolss/TicketShop.git
    id: GetTransactions
    path: src/DbRepository/TransactionRepository.cs
    startLine: 146
  assemblies:
  - DbRepository
  namespace: TicketApi.Db
  syntax:
    content: public List<Transaction> GetTransactions(int offset = 0, int maxLimit = 20)
    parameters:
    - id: offset
      type: System.Int32
    - id: maxLimit
      type: System.Int32
    return:
      type: System.Collections.Generic.List{TicketApi.Db.Models.Transaction}
    content.vb: Public Function GetTransactions(offset As Integer = 0, maxLimit As Integer = 20) As List(Of Transaction)
  overload: TicketApi.Db.TransactionRepository.GetTransactions*
  implements:
  - TicketApi.Db.Interface.ITransactionRepository.GetTransactions(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TicketApi.Db
  commentId: N:TicketApi.Db
  isExternal: false
  name: TicketApi.Db
  nameWithType: TicketApi.Db
  fullName: TicketApi.Db
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TicketApi.Db.Interface.ITransactionRepository
  commentId: T:TicketApi.Db.Interface.ITransactionRepository
  parent: TicketApi.Db.Interface
  isExternal: false
  name: ITransactionRepository
  nameWithType: ITransactionRepository
  fullName: TicketApi.Db.Interface.ITransactionRepository
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TicketApi.Db.Interface
  commentId: N:TicketApi.Db.Interface
  isExternal: false
  name: TicketApi.Db.Interface
  nameWithType: TicketApi.Db.Interface
  fullName: TicketApi.Db.Interface
- uid: TicketApi.Db.TransactionRepository.#ctor*
  commentId: Overload:TicketApi.Db.TransactionRepository.#ctor
  isExternal: false
  name: TransactionRepository
  nameWithType: TransactionRepository.TransactionRepository
  fullName: TicketApi.Db.TransactionRepository.TransactionRepository
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TicketApi.Db.TransactionRepository.AddTransaction*
  commentId: Overload:TicketApi.Db.TransactionRepository.AddTransaction
  isExternal: false
  name: AddTransaction
  nameWithType: TransactionRepository.AddTransaction
  fullName: TicketApi.Db.TransactionRepository.AddTransaction
- uid: TicketApi.Db.Interface.ITransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  parent: TicketApi.Db.Interface.ITransactionRepository
  isExternal: false
  name: AddTransaction(Transaction)
  nameWithType: ITransactionRepository.AddTransaction(Transaction)
  fullName: TicketApi.Db.Interface.ITransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
  spec.csharp:
  - uid: TicketApi.Db.Interface.ITransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
    name: AddTransaction
    nameWithType: ITransactionRepository.AddTransaction
    fullName: TicketApi.Db.Interface.ITransactionRepository.AddTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TicketApi.Db.Models.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: TicketApi.Db.Models.Transaction
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.ITransactionRepository.AddTransaction(TicketApi.Db.Models.Transaction)
    name: AddTransaction
    nameWithType: ITransactionRepository.AddTransaction
    fullName: TicketApi.Db.Interface.ITransactionRepository.AddTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TicketApi.Db.Models.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: TicketApi.Db.Models.Transaction
  - name: )
    nameWithType: )
    fullName: )
- uid: TicketApi.Db.Models.Transaction
  commentId: T:TicketApi.Db.Models.Transaction
  parent: TicketApi.Db.Models
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: TicketApi.Db.Models.Transaction
- uid: TicketApi.Db.Models
  commentId: N:TicketApi.Db.Models
  isExternal: false
  name: TicketApi.Db.Models
  nameWithType: TicketApi.Db.Models
  fullName: TicketApi.Db.Models
- uid: TicketApi.Db.TransactionRepository.DeleteTransactionById*
  commentId: Overload:TicketApi.Db.TransactionRepository.DeleteTransactionById
  isExternal: false
  name: DeleteTransactionById
  nameWithType: TransactionRepository.DeleteTransactionById
  fullName: TicketApi.Db.TransactionRepository.DeleteTransactionById
- uid: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById(System.Int32)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById(System.Int32)
  parent: TicketApi.Db.Interface.ITransactionRepository
  isExternal: true
  name: DeleteTransactionById(Int32)
  nameWithType: ITransactionRepository.DeleteTransactionById(Int32)
  fullName: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById(System.Int32)
  spec.csharp:
  - uid: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById(System.Int32)
    name: DeleteTransactionById
    nameWithType: ITransactionRepository.DeleteTransactionById
    fullName: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById(System.Int32)
    name: DeleteTransactionById
    nameWithType: ITransactionRepository.DeleteTransactionById
    fullName: TicketApi.Db.Interface.ITransactionRepository.DeleteTransactionById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TicketApi.Db.TransactionRepository.GetTransactionById*
  commentId: Overload:TicketApi.Db.TransactionRepository.GetTransactionById
  isExternal: false
  name: GetTransactionById
  nameWithType: TransactionRepository.GetTransactionById
  fullName: TicketApi.Db.TransactionRepository.GetTransactionById
- uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById(System.Int32)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.GetTransactionById(System.Int32)
  parent: TicketApi.Db.Interface.ITransactionRepository
  isExternal: true
  name: GetTransactionById(Int32)
  nameWithType: ITransactionRepository.GetTransactionById(Int32)
  fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById(System.Int32)
  spec.csharp:
  - uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById(System.Int32)
    name: GetTransactionById
    nameWithType: ITransactionRepository.GetTransactionById
    fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById(System.Int32)
    name: GetTransactionById
    nameWithType: ITransactionRepository.GetTransactionById
    fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactionById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TicketApi.Db.TransactionRepository.GetTransactionByUserId*
  commentId: Overload:TicketApi.Db.TransactionRepository.GetTransactionByUserId
  isExternal: false
  name: GetTransactionByUserId
  nameWithType: TransactionRepository.GetTransactionByUserId
  fullName: TicketApi.Db.TransactionRepository.GetTransactionByUserId
- uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId(System.String)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId(System.String)
  parent: TicketApi.Db.Interface.ITransactionRepository
  isExternal: true
  name: GetTransactionByUserId(String)
  nameWithType: ITransactionRepository.GetTransactionByUserId(String)
  fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId(System.String)
  spec.csharp:
  - uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId(System.String)
    name: GetTransactionByUserId
    nameWithType: ITransactionRepository.GetTransactionByUserId
    fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId(System.String)
    name: GetTransactionByUserId
    nameWithType: ITransactionRepository.GetTransactionByUserId
    fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactionByUserId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{TicketApi.Db.Models.Transaction}
  commentId: T:System.Collections.Generic.List{TicketApi.Db.Models.Transaction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Transaction>
  nameWithType: List<Transaction>
  fullName: System.Collections.Generic.List<TicketApi.Db.Models.Transaction>
  nameWithType.vb: List(Of Transaction)
  fullName.vb: System.Collections.Generic.List(Of TicketApi.Db.Models.Transaction)
  name.vb: List(Of Transaction)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketApi.Db.Models.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: TicketApi.Db.Models.Transaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketApi.Db.Models.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: TicketApi.Db.Models.Transaction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TicketApi.Db.TransactionRepository.UpdateTransaction*
  commentId: Overload:TicketApi.Db.TransactionRepository.UpdateTransaction
  isExternal: false
  name: UpdateTransaction
  nameWithType: TransactionRepository.UpdateTransaction
  fullName: TicketApi.Db.TransactionRepository.UpdateTransaction
- uid: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  parent: TicketApi.Db.Interface.ITransactionRepository
  isExternal: false
  name: UpdateTransaction(Transaction)
  nameWithType: ITransactionRepository.UpdateTransaction(Transaction)
  fullName: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
  spec.csharp:
  - uid: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
    name: UpdateTransaction
    nameWithType: ITransactionRepository.UpdateTransaction
    fullName: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TicketApi.Db.Models.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: TicketApi.Db.Models.Transaction
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction(TicketApi.Db.Models.Transaction)
    name: UpdateTransaction
    nameWithType: ITransactionRepository.UpdateTransaction
    fullName: TicketApi.Db.Interface.ITransactionRepository.UpdateTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TicketApi.Db.Models.Transaction
    name: Transaction
    nameWithType: Transaction
    fullName: TicketApi.Db.Models.Transaction
  - name: )
    nameWithType: )
    fullName: )
- uid: TicketApi.Db.TransactionRepository.FindTransactions*
  commentId: Overload:TicketApi.Db.TransactionRepository.FindTransactions
  isExternal: false
  name: FindTransactions
  nameWithType: TransactionRepository.FindTransactions
  fullName: TicketApi.Db.TransactionRepository.FindTransactions
- uid: TicketApi.Db.Interface.ITransactionRepository.FindTransactions(System.String)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.FindTransactions(System.String)
  parent: TicketApi.Db.Interface.ITransactionRepository
  isExternal: true
  name: FindTransactions(String)
  nameWithType: ITransactionRepository.FindTransactions(String)
  fullName: TicketApi.Db.Interface.ITransactionRepository.FindTransactions(System.String)
  spec.csharp:
  - uid: TicketApi.Db.Interface.ITransactionRepository.FindTransactions(System.String)
    name: FindTransactions
    nameWithType: ITransactionRepository.FindTransactions
    fullName: TicketApi.Db.Interface.ITransactionRepository.FindTransactions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.ITransactionRepository.FindTransactions(System.String)
    name: FindTransactions
    nameWithType: ITransactionRepository.FindTransactions
    fullName: TicketApi.Db.Interface.ITransactionRepository.FindTransactions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TicketApi.Db.TransactionRepository.GetTransactions*
  commentId: Overload:TicketApi.Db.TransactionRepository.GetTransactions
  isExternal: false
  name: GetTransactions
  nameWithType: TransactionRepository.GetTransactions
  fullName: TicketApi.Db.TransactionRepository.GetTransactions
- uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactions(System.Int32,System.Int32)
  commentId: M:TicketApi.Db.Interface.ITransactionRepository.GetTransactions(System.Int32,System.Int32)
  parent: TicketApi.Db.Interface.ITransactionRepository
  isExternal: true
  name: GetTransactions(Int32, Int32)
  nameWithType: ITransactionRepository.GetTransactions(Int32, Int32)
  fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactions(System.Int32, System.Int32)
  spec.csharp:
  - uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactions(System.Int32,System.Int32)
    name: GetTransactions
    nameWithType: ITransactionRepository.GetTransactions
    fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TicketApi.Db.Interface.ITransactionRepository.GetTransactions(System.Int32,System.Int32)
    name: GetTransactions
    nameWithType: ITransactionRepository.GetTransactions
    fullName: TicketApi.Db.Interface.ITransactionRepository.GetTransactions
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
